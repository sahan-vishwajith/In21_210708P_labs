#include<bits/stdc++.h>
#include <iostream>
using namespace std;

// Define a pair type for use in the priority queue
typedef pair<int, int> pair_type;

// Implement Prim's algorithm to find minimum spanning tree
void MST_prims(int arr[][6],int s,int v_count){
    // Initialize vectors to hold key values, phi values, and visited status
    vector<int> key(v_count,INFINITY); // Set all keys to infinity initially
    vector<int> phi(v_count,NULL);     // Set all phi values to NULL initially
    vector<bool> mstIN(v_count, false);// Set all vertices as not visited initially
    
    // Set the initial vertex's key value to 0
    key[s]=0;
    
    // Declare variables for later use in loop
    int u;
    int weight;
    
    // Create a priority queue to hold pairs of (key, vertex) in increasing order of key
    priority_queue<pair_type ,vector<pair_type>, greater<pair_type>> Q;
    
    // Add the initial vertex and its key value to the queue
    Q.push(make_pair(0,s));
    
    // Loop until all vertices have been visited
    while (!Q.empty()){
        // Get the vertex with the smallest key value from the queue
        u=Q.top().second;
        Q.pop();
        
        // If the vertex hasn't already been visited
        if(mstIN[u]== false){
            // Mark it as visited
            mstIN[u]= true;
            
            // For each neighboring vertex that hasn't been visited yet
            for(int i=0;i<v_count;i++){
                if(arr[u][i]!=0){ // Check if there's an edge between the two vertices
                    weight = arr[u][i]; // Get the weight of the edge
                    
                    // If the neighboring vertex hasn't been visited and the weight is less than its current key value
                    if(mstIN[i] == false && weight < key[i]){
                        key[i]=weight; // Update the neighboring vertex's key value
                        Q.push(make_pair(key[i],i)); // Add the neighboring vertex and its new key value to the queue
                        phi[i]=u; // Set the neighboring vertex's phi value to the current vertex
                    }
                }
            }
        }
    }
    
    // Print out the minimum spanning tree
    for (int i = 0; i < v_count; ++i)
        printf("%d - %d : %d\n", phi[i], i,key[i]);
}

int main() {
    // Print out the header for the edge weights
    cout<<"Edge  : weight\n";
    
    // Define the adjacency matrix for the graph
    int arr[6][6] ={{0, 3,  0, 0, 0,  1},
                   {3, 0,  2, 1, 10, 0},
                   {0, 2,  0, 3, 0,  5},
                   {0, 1,  3, 0, 5,  0},
                   {0, 10, 0, 5, 0,  4},
                   {1, 0,  5, 0, 4,  0}};
                   
    // Call Prim's algorithm function with the starting vertex and number of vertices
    MST_prims(arr,0,6);
    
    return 0;
}
