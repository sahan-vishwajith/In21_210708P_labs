#include <iostream>
#include <bits/stdc++.h>
#define INF 0x3f3f3f3f
using namespace std;
typedef pair<int,int> pair_type;
double Dijkstra(int graph[6][6],int S){
    int u;
    int weight;
    vector<int> shortime(6,INFINITY);
    shortime[S]=0;
    priority_queue<pair_type ,vector<pair_type>,greater<pair_type>> Q;
    Q.push(make_pair(0,S));
    while (!Q.empty()){
        u=Q.top().second;
        Q.pop();
        for(int v=0;v<6;v++){
            if(graph[u][v]!=0){
                weight=graph[u][v];
                if(shortime[v]>shortime[u]+weight){
                    Q.push(make_pair(shortime[u]+weight,v));
                    shortime[v]=shortime[u]+weight;

                }
            }
        }
    }
    double sum=0;
    cout<<("Vertex time from Source ")<<S<<"\n";
    for (int i = 0; i < 6; ++i){
        cout<<i<<" -> "<<shortime[i]<<endl;
        sum+=   shortime[i];
    }
    return sum/5.0;
}
int main() {
    double avg;
    double min=INFINITY;
    vector<int> best_city;
    int graph[6][6]={{0,10,0,0,15,5},
                     {10,0,10,30,0,0},
                     {0,10,0,12,5,0},
                     {0,30,12,0,0,20},
                     {15,0,5,0,0,0},
                     {5,0,0,20,0,0}};
    for (int i=0;i<6;i++){
        avg=Dijkstra(graph,i);
        cout<<"Average time form source "<<i<<"->"<<avg<<"\n";
        if(avg<min){
            min=avg;
            best_city={i};
        } else if(avg==min){
            best_city.push_back(i);
        }

    }
    cout<<"Best city to build hospital->";
    for(int city:best_city){
        cout<<city<<",";
    }
}
